name: GitHub Classroom Workflow
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: build backend
        run: |
          docker build -t backend:latest ./backend.dockerfile --target=release
          docker save backend:latest > backend.tar
      - uses: actions/upload-artifact@v4 
        with: 
          name: backend-artefact 
          path: backend.tar
      - name: build tests
        run: |
          docker build -t backend:latest ./backend.dockerfile --target=build
          docker save tests:latest > tests.tar
      - uses: actions/upload-artifact@v4 
        with: 
          name: tests-artefact 
          path: tests.tar

  test:
    name: test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with: 
          name: tests-artefact 
      - name: run tests
        run: |
          docker load < tests.tar
          docker compose -f ./docker-compose.tests.yml up --exit-code-from tests
          if [[ 0 == $? ]]
          then
            echo "TESTS_STATUS=success" >> $GITHUB_ENV
          else
            echo "TESTS_STATUS=failed" >> $GITHUB_ENV
          fi

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with: 
          name: backend-artefact 
      - name: load to server
        run: |
          sshpass -p ${{ secrets.SERVER_PASSWORD }} scp -o StrictHostKeyChecking=no backend.tar ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }}:~/
          sshpass -p ${{ secrets.SERVER_PASSWORD }} scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }}:~/
          sshpass -p ${{ secrets.SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }} mkdir -p postgres
          sshpass -p ${{ secrets.SERVER_PASSWORD }} scp -o StrictHostKeyChecking=no postgres/10-create-user-and-db.sql ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }}:~/postgres

          sshpass -p ${{ secrets.SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }} docker load < backend.tar
          sshpass -p ${{ secrets.SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP_ADDRESS }} docker-compose up -d


#  integration-tests:
#    name: Autograding
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Run API Tests
#        uses: matt-ball/newman-action@master
#        with:
#          collection: postman/[inst] Lab1.postman_collection.json
#          environment: postman/[inst][heroku] Lab1.postman_environment.json
#          delayRequest: 100
#          reporters: '[ "cli" ]'
#
#      - name: Autograding
#        uses: education/autograding@v1
#        continue-on-error: true
#
#      - name: Github auto grader mark
#        uses: Romanow/google-sheet-autograder-marker@v1.0
#        with:
#          google_token: ${{secrets.GOOGLE_API_KEY}}
#          sheet_id: "1xkgjUX6Qmk7rdJG-QPOToav-HWWtthJjnShIKnw3oIY"
#          homework_number: 1
#          user_column: 'D'
#          column_offset: 'F'
#          mark: "'+"
